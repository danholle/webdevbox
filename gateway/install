#!/bin/bash

#############################
#                           
#  Gateway Setup for Webapp Development Box  
#
#############################

echo " "

# Check to see if it's already installed
if [ -d /usr/nginx ]
then
  echo "It looks like your gateway server (nginx) is already installed.  If you"
  echo "want to remove what's there and clean re-install, use these commands:"
  echo " "
  echo "    gateway/purge"
  echo "    gateway/install"
  echo " "
  exit 1
fi

# check parameters ... there should be 0
if [ "$#" -gt 0 ]
then
  echo "WTF?!?  I wasn't expecting parameters.  Just say "
  echo " "
  echo "    gateway/install"
  echo " "
  echo "and I'll just do it."
  echo " "
  exit 1
fi

echo " "
echo "Setting the firewall to allow ssh, http, https traffic" 
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw enable

echo " "
echo "Installing your secure gateway, nginx (reverse proxy)"
sudo apt-get -y install nginx
sudo systemctl stop nginx

# Make config files accessible inside our box
sudo chmod -R 777 /etc/nginx
sudo chmod -R 777 /var/www

# nginx has two directories for storing configurations:
# /etc/nginx/sites-available contains chunks of configuration 
#    that may or may not be enabled.  Files you'll find here:
#    default:  The initial config that's there in the default
#      nginx install.
#    basic:  Listen on 80, serve html out of /var/www/html.
#      This is enabled by gateway/install, and is of known
#      form so certify can manipulate it to do what is needed
#      by certbot to create certificates
#    precertify:  This is created during the certify process
#      to make the challenges work.  Only enabled briefly, only
#      during the certbot certificate creation.
#    https4all:  After certification, we force all traffic to
#      use https.  This does this and is enabled post-cert.
#    rosetta:  This initially takes all HTTPS traffic for all
#      URLs and dispatches work out to the place that the 
#      URL seems to imply.  Default remains serving HTML
#      from /var/www/html.  Later steps may peel off traffic
#      for particular URLs, removing them from rosetta's
#      server_name list.
#    tomcat:  This is server block placed by tomcat/install.
[ -L /etc/nginx/sites-enabled/default ] && sudo unlink /etc/nginx/sites-enabled/default
sudo cp gateway/basic /etc/nginx/sites-available/basic
sudo ln -s /etc/nginx/sites-available/basic /etc/nginx/sites-enabled

# nginx is set up to serve static HTML from /var/www/html.
# Put our "Hello World" page there.
sudo cp gateway/hello.html /var/www/html/hello.html

# Set nginx to start automatically at system startup.
sudo systemctl enable nginx

# Start it now with our new conf
sudo systemctl start nginx

echo " "
echo "-----------------------------------------------------"
echo " "
echo "Your gateway server (nginx) is installed and running.  Next steps:"
echo " *  Access Hello World page via nginx using browser (from local or network peer)"
echo " *  Do port forwarding for SSH, HTTP, and HTTPS on your router/hub"
echo " *  Check that only these ports are visible externally"
echo " *  Access Hello World page from public internet"
echo "For detailed instructions, see the gateway README. "
echo " "
echo "Once that all works, you're ready to connect your external URL to your box (url2box)."
echo " "

